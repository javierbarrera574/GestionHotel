<EditForm Model="huesp" OnValidSubmit="onValidSubbmit">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label class="mb-2 fw-bold color-primario">DNI</label>
        <div class="mb-2">
            <InputNumber class="form-control" @bind-Value="@huesp.Dni" />
            <ValidationMessage For="@(() => huesp.Dni)" />
        </div>
    </div>
    <div class="form-group">
        <label class="mb-2 fw-bold color-primario">Nombre</label>
        <div class="mb-2">
            <InputText class="form-control" @bind-Value="@huesp.Nombres" />
            <ValidationMessage For="@(() => huesp.Nombres)" />
        </div>
    </div>
    <div class="form-group">
        <label class="mb-2 fw-bold color-primario">Apellido</label>
        <div class="mb-2">
            <InputText class="form-control" @bind-Value="@huesp.Apellidos" />
            <ValidationMessage For="@(() => huesp.Apellidos)" />
        </div>
    </div>
    <div class="form-group">
        <label class="mb-2 fw-bold color-primario">Checkin</label>
        <div class="mb-2">
            <InputCheckbox class="form-check-input" @bind-Value="@huesp.Checkin" />
            <ValidationMessage For="@(() => huesp.Checkin)" />
        </div>
    </div>
    <div class="form-group">
        <label class="mb-2 fw-bold color-primario">DNI Persona Titular</label>
        <div class="mb-2">
            <InputNumber class="form-control" @bind-Value="@huesp.DniPersona" />
            <ValidationMessage For="@(() => huesp.DniPersona)" />
        </div>
    </div>
 @*    <div class="form-group">
        <label class="mb-2 fw-bold color-primario">Número de habitación</label>
        <div class="mb-2">
            <InputNumber class="form-control" @bind-Value="@huesp.HabitacionNumero" />
            <ValidationMessage For="@(() => huesp.HabitacionNumero)" />
        </div>
    </div> *@

    <div class="form-group ">
        <label class="mb-2 fw-bold color-primario">Numero de habitacion</label>
        <InputSelect class="form-control mb-4" @bind-Value="huesp.HabitacionNumero">
            <option value="">Numero de Habitacion</option>
            @foreach (var habitacion in HabitacionesDisponibles)
            {
                <option value="@habitacion.Nhab">@habitacion.Nhab</option>
            }
        </InputSelect>
    </div>


    <button class="btn btn-primary" type="submit">Aceptar</button>
    <button class="btn btn-secondary" @onclick="onCancel">Cancelar</button>
    <a button class="btn btn-secondary" @onclick="onGuardarYRecargar">Guardar este huésped y cargar otro</a>

</EditForm>

@code 
{
    [Parameter] public Huesped huesp { get; set; } = new Huesped();
    [Parameter] public EventCallback onValidSubbmit { get; set; }
    [Parameter] public EventCallback onCancel { get; set; }
    [Parameter] public EventCallback onGuardarYRecargar { get; set; }
    List<Habitacion> Habitaciones = new List<Habitacion>();
    List<Habitacion> HabitacionesDisponibles = new List<Habitacion>();
    List<Huesped>? Huespedes;
    bool Error;
    string Mensaje = "";

    private async Task LeerHabitaciones()
    {
        var RespuestaHuespedes = await http.Get<List<Huesped>>("api/Huesped");
        Error = RespuestaHuespedes.Error;
        HabitacionesDisponibles.Clear();

        if (!Error)
        {
            var huespedes = RespuestaHuespedes.Respuesta;

            var respuestaHabitaciones = await http.Get<List<Habitacion>>("api/Habitacion");
            Error = respuestaHabitaciones.Error;

            if (!Error)
            {
                Habitaciones = respuestaHabitaciones.Respuesta;
                HabitacionesDisponibles = Habitaciones
                .Where(habitacion => habitacion.Estado.ToString() == "disponible" && !huespedes
                .Any(huesped => huesped.HabitacionNumero == habitacion.Nhab))
                .ToList();
            }    
            else
            {
                Mensaje = await respuestaHabitaciones.ObtenerError();
            }
        }
        else
        {
            Mensaje = await RespuestaHuespedes.ObtenerError();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LeerHabitaciones();
    }
}
